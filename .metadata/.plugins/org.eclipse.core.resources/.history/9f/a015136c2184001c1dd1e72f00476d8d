package com.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.model.User;
import com.service.UserService;

@Service
public class UserServiceImpl implements UserService {

	public static List<User> usersList = new ArrayList<>();

	private static Long COUNTER = 1L;

	static {
		User user = new User(COUNTER++, "Georgina", "Ortega", 24, "Brazil");
		usersList.add(user);
		user = new User(COUNTER++, "Rosa", "Sparks", 34, "Mexic");
		usersList.add(user);
		user = new User(COUNTER++, "Orla", "Mccoy", 19, "USA");
		usersList.add(user);
		user = new User(COUNTER++, "Jerry", "Hanna", 42, "CANADA");
		usersList.add(user);
	}

	@Override
	public List<User> findAll() {

		return usersList;
	}

	@Override
	public Optional<User> findById(Long id) {

		return usersList.stream().filter(user -> user.getId() == id).findFirst();

		// Optional<User> userOpt = usersList.stream().filter(user -> user.getId() ==
		// id).findFirst();
//		if (userOpt.isEmpty()) {
//			return userOpt;
//		}
//		return Optional.empty();
		// return userOpt;
	}

	@Override
	public void add(User user) {
		user.setId(COUNTER++);
		usersList.add(user);
	}

	@Override
	public Optional<User> update(User user) {
		Optional<User> userOpt = usersList.stream().filter(u -> u.getId() == user.getId()).findFirst();
		return null;
	}

	@Override
	public Optional<User> delete(Long id) {
		Optional<User> userOpt = usersList.stream().filter(user -> user.getId() == id).findFirst();
		if (userOpt.isPresent()) {
			usersList = usersList.stream().filter(user -> userOpt.get().getId() != user.getId())
					.collect(Collectors.toList());
			return userOpt;
		}

		return Optional.empty();
	}

}
